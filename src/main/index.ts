
import FeiJiang from "./feijiang";
import {
  app,
  BrowserWindow,
  Menu,
  globalShortcut,
} from "electron";
import path from "path";
const env = process.env.NODE_ENV;
import { GetTemplate } from "./menu";
import { InitIPC } from "./ipc";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

let icon_path = "";
let package_json_dir = "";
if (process.env.NODE_ENV === "development" || !process.resourcesPath) {
  package_json_dir = path.resolve(__dirname, "../../");
  icon_path = path.join(package_json_dir, "assets/img", "ICON.png");
  console.log(package_json_dir);
} else {
  icon_path = path.join(process.resourcesPath, "/assets/img", "ICON.png");
  package_json_dir = path.join(process.resourcesPath, "app");
  console.log(package_json_dir);
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  FeiJiang.clearEngine().finally(() => {
    app.quit();
  });
}
let mainWindow: BrowserWindow;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 720,
    width: 800,
    resizable: false,
    autoHideMenuBar:false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });
  FeiJiang.mainWin = mainWindow;
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").initialize();
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").enable(mainWindow.webContents);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // 在开发环境和生产环境均可通过快捷键打开devTools
  globalShortcut.register("CommandOrControl+Shift+i", function () {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  });
  console.log(env);
  // Open the DevTools.
  if (env !== "production") {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  }
  const menu = Menu.buildFromTemplate(GetTemplate());
  mainWindow.setMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    FeiJiang.clearEngine().finally(() => {
      app.quit();
    });
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// Menu.setApplicationMenu(menu);

InitIPC();
