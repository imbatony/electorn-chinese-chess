import { BoardStatus, BoardStatusKey } from "../common/IPCInfos";
import {
  app,
  BrowserWindow,
  Menu,
  MenuItemConstructorOptions,
  MenuItem,
  clipboard,
  ipcMain,
  globalShortcut,
  Notification
} from "electron";
import fetch from "node-fetch";
import path from "path";
import { openAboutWindow } from "./about";
const env = process.env.NODE_ENV;
import { UCCIEngine, UCCICallback, GetELEEYEEngine } from "./UCCI";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

const isMac = process.platform === "darwin";
let icon_path = "";
let package_json_dir = "";
if (process.env.NODE_ENV === "development" || !process.resourcesPath) {
  package_json_dir = path.resolve(__dirname, "../../");
  icon_path = path.join(package_json_dir, "assets/img", "ICON.png");
  console.log(package_json_dir);
} else {
  icon_path = path.join(process.resourcesPath, "/assets/img", "ICON.png");
  package_json_dir = path.join(process.resourcesPath, "app");
  console.log(package_json_dir);
}
const eleeyeeEngine = GetELEEYEEngine();
eleeyeeEngine.sendAsync("ucci");

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  eleeyeeEngine.quit().then(() => {
    app.quit();
  });
}
let boardStatus: BoardStatus = null;
let mainWindow: BrowserWindow;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 650,
    width: 800,
    resizable: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").initialize();
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  require("@electron/remote/main").enable(mainWindow.webContents);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // 在开发环境和生产环境均可通过快捷键打开devTools
  globalShortcut.register("CommandOrControl+Shift+i", function () {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  });
  console.log(env);
  // Open the DevTools.
  if (env !== "production") {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    eleeyeeEngine.quit().then(() => {
      app.quit();
    });
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const template: Array<MenuItemConstructorOptions | MenuItem> = [
  {
    label: "文件",
    submenu: [
      isMac
        ? { role: "close", label: "退出" }
        : { role: "quit", label: "退出" },
    ],
  },
  {
    label: "操作",
    submenu: [
      {
        id: "op:back",
        label: "悔棋",
        click: () => {
          mainWindow.webContents.send("op:back");
        },
        enabled: false,
      },
      {
        id: "op:restart",
        label: "重新开始",
        click: () => {
          mainWindow.webContents.send("op:restart");
        },
        enabled: false,
      },
      {
        id: "op:rotation",
        label: "翻转",
        click: () => {
          mainWindow.webContents.send("op:rotation");
        },
        enabled: false,
      },
      {
        id: "op:bgm",
        label: "打开/关闭音乐",
        click: () => {
          mainWindow.webContents.send("op:togglebgm");
        },
        enabled: true,
      },
      {
        id: "op:copyfen",
        label: "复制盘面FEN码",
        click: () => {
          clipboard.writeText(boardStatus.curFen);
          new Notification({title:"复制成功",body:"复制盘面FEN码成功"}).show()
        },
        enabled: false,
      }
    ],
  },
  {
    role: "help",
    label: "帮助",
    submenu: [
      {
        label: "关于",
        click: () => {
          openAboutWindow({
            copyright: "Copyright (c) 2022 esfak47",
            win_options: {
              parent: mainWindow,
              modal: true,
              title: "关于",
            },
            bug_link_text: "报告问题",
            show_close_button: "Close",
            use_version_info: false,
          });
        },
      },
    ],
  },
];

const menu = Menu.buildFromTemplate(template);
Menu.setApplicationMenu(menu);
ipcMain.on("close-me", (_evt, _arg): void => {
  app.quit();
});
ipcMain.handle("queryMove", async (event, fenStr, difficulty) => {
  // const result = await fetch(
  //   `http://www.chessdb.cn/chessdb.php?action=querybest&board=${fenStr}`
  // );
  // return await result.text();
  console.log("recieve:", fenStr, " ,query engine to get best move");
  const info = await eleeyeeEngine.infoAndMove(fenStr, 5000 * difficulty);
  if (info) {
    console.log(info.bestmove);
    return info.bestmove;
  } else {
    console.log("unable to get best move for ", fenStr);
    return "";
  }
});

ipcMain.handle(BoardStatusKey, (_evt, status: BoardStatus) => {
  boardStatus = status;
  console.log(status);
  menu.getMenuItemById("op:back").enabled = status.canBack;
  menu.getMenuItemById("op:restart").enabled = true;
  menu.getMenuItemById("op:rotation").enabled = true;
  menu.getMenuItemById("op:copyfen").enabled = true;
});

ipcMain.on("bgm", (evt, bgm: boolean, type: string) => {
  console.log(bgm)
});
